{"version":3,"sources":["lib.js","gameOfLifeSrc.js","World.js","Game-of-Life.js","index.js"],"names":["getCartisianProduct","columnNeighbours","cartisianProduct","element","index","length","push","validateNeighbours","limits","some","topX","topY","bottomX","bottomY","remove","cell","getValidNeighbours","neighbourCandidates","removeGivenCell","allNeighbours","filter","isValidNeighbour","module","exports","getNeighbours","cellCoordinates","rowNeighbours","reduce","contains","list","e","extractLimits","bounds","topLeft","bottomRight","getAllCoordinates","allCoordinates","row","column","verifyRules","numOfNeighbours","require","nextGeneration","currGeneration","includes","bind","aliveCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","coordinate","value","err","return","TableData","react_default","a","createElement","id","this","props","className","onClick","clickEvent","React","Component","TableRow","_this","grid","Array","fill","map","data","columnIndex","rowIndex","World_TableData","key","Table","_this2","table","World_TableRow","World","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentGeneration","handleClick","assertThisInitialized","nextState","interval","cellId","coordinates","split","parseInt","document","getElementById","style","backgroundColor","target","changeCellColor","getCellCoordinates","slice","setState","updateCurrentGeneration","cells","_this4","setInterval","clearInterval","World_Table","startGame","stopGame","GameOfLife","src_World_0","ReactDOM","render","Game_of_Life"],"mappings":"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","file":"static/js/main.e326dd26.chunk.js","sourcesContent":["const getCartisianProduct = function (columnNeighbours) {\n  return function (cartisianProduct, element) {\n    for (let index = 0; index < columnNeighbours.length; index++) {\n      cartisianProduct.push([element, columnNeighbours[index]]);\n    }\n    return cartisianProduct;\n  }\n};\n\nconst validateNeighbours = function (limits) {\n  return function (element) {\n    return !(element.some((element => (element < limits.topX && element < limits.topY) || (element > limits.bottomX && element > limits.bottomY))))\n  };\n};\n\nconst remove = function (cell) {\n  return function (element) {\n    return !(element[0] == cell[0] && element[1] == cell[1])\n  };\n};\n\nconst getValidNeighbours = function (cell, neighbourCandidates, limits) {\n  let removeGivenCell = remove(cell);\n  let allNeighbours = neighbourCandidates.filter(removeGivenCell);\n  let isValidNeighbour = validateNeighbours(limits);\n  return allNeighbours.filter(isValidNeighbour);\n};\n\nconst getNeighbours = function (cellCoordinates, limits) {\n  let rowNeighbours = [cellCoordinates[0] - 1, cellCoordinates[0], cellCoordinates[0] + 1];\n  let columnNeighbours = [cellCoordinates[1] - 1, cellCoordinates[1], cellCoordinates[1] + 1];\n  let cartisianProduct = getCartisianProduct(columnNeighbours);\n  let neighbourCandidates = rowNeighbours.reduce(cartisianProduct, []);\n  let neighbours = getValidNeighbours(cellCoordinates, neighbourCandidates, limits);\n  return neighbours;\n};\n\nconst contains = function (list, element) {\n  return list.some(e => e[0] === element[0] && e[1] === element[1])\n}\n\nconst extractLimits = function (bounds) {\n  return {\n    \"topX\": bounds.topLeft[0],\n    \"topY\": bounds.topLeft[1],\n    \"bottomX\": bounds.bottomRight[0],\n    \"bottomY\": bounds.bottomRight[1]\n  };\n};\n\nconst getAllCoordinates = function (limits) {\n  let allCoordinates = [];\n  for (let row = limits.topX; row <= limits.bottomX; row++) {\n    for (let column = limits.topY; column <= limits.bottomY; column++) {\n      allCoordinates.push([row, column]);\n    }\n  }\n  return allCoordinates;\n};\n\nconst verifyRules = function (numOfNeighbours) {\n  if (numOfNeighbours < 2 || numOfNeighbours > 3) {\n    return 0;\n  }\n  if (numOfNeighbours == 3) {\n    return 1;\n  }\n};\n\nmodule.exports = {\n  getCartisianProduct, validateNeighbours, remove, getValidNeighbours, getNeighbours, contains, extractLimits, getAllCoordinates, verifyRules\n};\n","const { extractLimits, getAllCoordinates, contains, getNeighbours, verifyRules } = require(\"./lib.js\");\n\nconst nextGeneration = function (currGeneration, bounds) {\n  let limits = extractLimits(bounds);\n  let allCoordinates = getAllCoordinates(limits);\n  let includes = contains.bind(null, currGeneration);\n  let aliveCells = [];\n\n  for (let coordinate of allCoordinates) {\n    let neighbours = getNeighbours(coordinate, limits);\n    let numOfNeighbours = neighbours.filter(includes).length;\n\n    if ((numOfNeighbours == 2 && contains(currGeneration, coordinate)) || verifyRules(numOfNeighbours) == 1)\n      aliveCells.push(coordinate);\n  }\n  return aliveCells;\n};\n\nexport default nextGeneration;","import React from 'react';\nimport \"./World.css\";\nimport nextGeneration from './gameOfLifeSrc';\n\nclass TableData extends React.Component {\n\n  render() {\n    return (\n      <div id={this.props.id} className='cell' onClick={this.props.clickEvent}></div>\n    )\n  }\n}\n\nclass TableRow extends React.Component {\n\n  render() {\n    let row = new Array(15).fill(0);\n\n    let grid = row.map((data, columnIndex) => {\n      let id = this.props.rowIndex + \",\" + columnIndex;\n      return <TableData id={id} key={id} clickEvent={this.props.clickEvent} />;\n    })\n    return <div id={this.props.rowIndex} className=\"row\">{grid}</div>;\n  }\n}\n\nclass Table extends React.Component {\n  render() {\n    let table = new Array(15).fill(0);\n\n    table = table.map((row, rowIndex) => {\n      return <TableRow rowIndex={rowIndex} key={rowIndex} clickEvent={this.props.clickEvent} />\n    })\n    return <div>{table}</div>;\n  }\n}\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentGeneration: [],\n      bounds: {\n        topLeft: [0, 0],\n        bottomRight: [14, 14]\n      }\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.nextState = this.nextState.bind(this);\n    this.interval = null;\n  }\n\n  getCellCoordinates(cellId) {\n    let coordinates = cellId.split(\",\");\n    let x = parseInt(coordinates[0]);\n    let y = parseInt(coordinates[1]);\n    return [x, y];\n  }\n\n  changeCellColor(cellId) {\n    let cell = document.getElementById(cellId);\n    cell.style.backgroundColor = \"green\";\n  }\n\n  handleClick(e) {\n    let cellId = e.target.id;\n    this.changeCellColor(cellId);\n    let cellCoordinates = this.getCellCoordinates(cellId);\n    let currGeneration = this.state.currentGeneration.slice();\n    currGeneration.push(cellCoordinates);\n    this.setState({ currentGeneration: currGeneration });\n  }\n\n  nextState() {\n    let aliveCells = nextGeneration(this.state.currentGeneration, this.state.bounds);\n    let coordinates = \"\";\n\n    this.state.currentGeneration.map(function (cellCoordinates) {\n      coordinates = cellCoordinates[0] + \",\" + cellCoordinates[1];\n      document.getElementById(coordinates).style.backgroundColor = \"white\";\n    })\n\n    aliveCells.map(function (cellCoordinates) {\n      coordinates = cellCoordinates[0] + \",\" + cellCoordinates[1];\n      document.getElementById(coordinates).style.backgroundColor = \"green\";\n    })\n    this.updateCurrentGeneration(aliveCells);\n  }\n\n  updateCurrentGeneration(cells) {\n    this.setState({ currentGeneration: cells })\n  }\n\n  startGame() {\n    this.interval = setInterval(() => this.nextState(), 500);\n  }\n\n  stopGame() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"world\">\n          <Table clickEvent={this.handleClick} />\n        </div>\n        <div className=\"buttonPanel\" >\n          <button onClick={this.startGame.bind(this)}>Start</button>\n          <button onClick={this.stopGame.bind(this)}>Stop</button>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default World;","import React from 'react';\nimport World from './World';\n\nclass GameOfLife extends React.Component {\n  render() {\n    return (<World></World>)\n  }\n}\n\nexport default GameOfLife;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GameOfLife from './Game-of-Life';\n\nReactDOM.render(<GameOfLife />, document.getElementById(\"root\"));"],"sourceRoot":""}